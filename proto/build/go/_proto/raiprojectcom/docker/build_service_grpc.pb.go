// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raiprojectcom_docker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerServiceClient is the client API for DockerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerServiceClient interface {
	Build(ctx context.Context, in *DockerBuildRequest, opts ...grpc.CallOption) (DockerService_BuildClient, error)
}

type dockerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerServiceClient(cc grpc.ClientConnInterface) DockerServiceClient {
	return &dockerServiceClient{cc}
}

func (c *dockerServiceClient) Build(ctx context.Context, in *DockerBuildRequest, opts ...grpc.CallOption) (DockerService_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &DockerService_ServiceDesc.Streams[0], "/raiprojectcom.docker.DockerService/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerServiceBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DockerService_BuildClient interface {
	Recv() (*DockerBuildResponse, error)
	grpc.ClientStream
}

type dockerServiceBuildClient struct {
	grpc.ClientStream
}

func (x *dockerServiceBuildClient) Recv() (*DockerBuildResponse, error) {
	m := new(DockerBuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerServiceServer is the server API for DockerService service.
// All implementations must embed UnimplementedDockerServiceServer
// for forward compatibility
type DockerServiceServer interface {
	Build(*DockerBuildRequest, DockerService_BuildServer) error
	mustEmbedUnimplementedDockerServiceServer()
}

// UnimplementedDockerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDockerServiceServer struct {
}

func (UnimplementedDockerServiceServer) Build(*DockerBuildRequest, DockerService_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedDockerServiceServer) mustEmbedUnimplementedDockerServiceServer() {}

// UnsafeDockerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerServiceServer will
// result in compilation errors.
type UnsafeDockerServiceServer interface {
	mustEmbedUnimplementedDockerServiceServer()
}

func RegisterDockerServiceServer(s grpc.ServiceRegistrar, srv DockerServiceServer) {
	s.RegisterService(&DockerService_ServiceDesc, srv)
}

func _DockerService_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DockerBuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DockerServiceServer).Build(m, &dockerServiceBuildServer{stream})
}

type DockerService_BuildServer interface {
	Send(*DockerBuildResponse) error
	grpc.ServerStream
}

type dockerServiceBuildServer struct {
	grpc.ServerStream
}

func (x *dockerServiceBuildServer) Send(m *DockerBuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DockerService_ServiceDesc is the grpc.ServiceDesc for DockerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raiprojectcom.docker.DockerService",
	HandlerType: (*DockerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _DockerService_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "build_service.proto",
}
